/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mitro_api_TYPES_H
#define mitro_api_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace mitro_api {

  typedef class MitroRPC GetMyDeviceKeyRequest;

  typedef class MitroRPC RemoveSecretResponse;

  class SignedRequest;

  class MitroException;

  class MitroRPC;

  class GetMyPrivateKeyRequest;

  class GetMyPrivateKeyResponse;

  class CheckTwoFactorRequiredRequest;

  class CheckTwoFactorRequiredResponse;

  class GetMyDeviceKeyResponse;

  class SecretClientData;

  class SecretCriticalData;

  class Secret;

  class GroupInfo;

  class ListMySecretsAndGroupKeysRequest;

  class ListMySecretsAndGroupKeysResponse;

  class GetSecretRequest;

  class GetSecretResponse;

  class AddSecretRequest;

  class AddSecretResponse;

  class RemoveSecretRequest;

  class EditEncryptedPrivateKeyRequest;

  class AddIdentityResponse;

  typedef struct _SignedRequest__isset {
    _SignedRequest__isset() : transactionId(false), request(false), signature(false), identity(false), clientIdentifier(false) {}
    bool transactionId :1;
    bool request :1;
    bool signature :1;
    bool identity :1;
    bool clientIdentifier :1;
  } _SignedRequest__isset;

  class SignedRequest {
  public:

    SignedRequest(const SignedRequest&);
    SignedRequest& operator=(const SignedRequest&);
    SignedRequest() : transactionId(), request(), signature(), identity(), clientIdentifier() {
    }

    virtual ~SignedRequest() throw();
    std::string transactionId;
    std::string request;
    std::string signature;
    std::string identity;
    std::string clientIdentifier;

    _SignedRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_request(const std::string& val);

    void __set_signature(const std::string& val);

    void __set_identity(const std::string& val);

    void __set_clientIdentifier(const std::string& val);

    bool operator == (const SignedRequest & rhs) const
    {
      if (__isset.transactionId != rhs.__isset.transactionId)
        return false;
      else if (__isset.transactionId && !(transactionId == rhs.transactionId))
        return false;
      if (!(request == rhs.request))
        return false;
      if (__isset.signature != rhs.__isset.signature)
        return false;
      else if (__isset.signature && !(signature == rhs.signature))
        return false;
      if (!(identity == rhs.identity))
        return false;
      if (!(clientIdentifier == rhs.clientIdentifier))
        return false;
      return true;
    }
    bool operator != (const SignedRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const SignedRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(SignedRequest &a, SignedRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const SignedRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _MitroException__isset {
    _MitroException__isset() : exceptionId(false), stackTraceString(false), rawMessage(false), userVisibleError(false), exceptionType(false) {}
    bool exceptionId :1;
    bool stackTraceString :1;
    bool rawMessage :1;
    bool userVisibleError :1;
    bool exceptionType :1;
  } _MitroException__isset;

  class MitroException {
  public:

    MitroException(const MitroException&);
    MitroException& operator=(const MitroException&);
    MitroException() : exceptionId(), stackTraceString(), rawMessage(), userVisibleError(), exceptionType() {
    }

    virtual ~MitroException() throw();
    std::string exceptionId;
    std::string stackTraceString;
    std::string rawMessage;
    std::string userVisibleError;
    std::string exceptionType;

    _MitroException__isset __isset;

    void __set_exceptionId(const std::string& val);

    void __set_stackTraceString(const std::string& val);

    void __set_rawMessage(const std::string& val);

    void __set_userVisibleError(const std::string& val);

    void __set_exceptionType(const std::string& val);

    bool operator == (const MitroException & rhs) const
    {
      if (!(exceptionId == rhs.exceptionId))
        return false;
      if (!(stackTraceString == rhs.stackTraceString))
        return false;
      if (!(rawMessage == rhs.rawMessage))
        return false;
      if (!(userVisibleError == rhs.userVisibleError))
        return false;
      if (__isset.exceptionType != rhs.__isset.exceptionType)
        return false;
      else if (__isset.exceptionType && !(exceptionType == rhs.exceptionType))
        return false;
      return true;
    }
    bool operator != (const MitroException &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const MitroException & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(MitroException &a, MitroException &b);

  inline std::ostream& operator<<(std::ostream& out, const MitroException& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _MitroRPC__isset {
    _MitroRPC__isset() : transactionId(false), deviceId(false) {}
    bool transactionId :1;
    bool deviceId :1;
  } _MitroRPC__isset;

  class MitroRPC {
  public:

    MitroRPC(const MitroRPC&);
    MitroRPC& operator=(const MitroRPC&);
    MitroRPC() : transactionId(), deviceId() {
    }

    virtual ~MitroRPC() throw();
    std::string transactionId;
    std::string deviceId;

    _MitroRPC__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    bool operator == (const MitroRPC & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      return true;
    }
    bool operator != (const MitroRPC &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const MitroRPC & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(MitroRPC &a, MitroRPC &b);

  inline std::ostream& operator<<(std::ostream& out, const MitroRPC& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GetMyPrivateKeyRequest__isset {
    _GetMyPrivateKeyRequest__isset() : transactionId(false), deviceId(false), userId(false), loginToken(false), loginTokenSignature(false), extensionId(false), twoFactorCode(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool userId :1;
    bool loginToken :1;
    bool loginTokenSignature :1;
    bool extensionId :1;
    bool twoFactorCode :1;
  } _GetMyPrivateKeyRequest__isset;

  class GetMyPrivateKeyRequest {
  public:

    GetMyPrivateKeyRequest(const GetMyPrivateKeyRequest&);
    GetMyPrivateKeyRequest& operator=(const GetMyPrivateKeyRequest&);
    GetMyPrivateKeyRequest() : transactionId(), deviceId(), userId(), loginToken(), loginTokenSignature(), extensionId(), twoFactorCode() {
    }

    virtual ~GetMyPrivateKeyRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string userId;
    std::string loginToken;
    std::string loginTokenSignature;
    std::string extensionId;
    std::string twoFactorCode;

    _GetMyPrivateKeyRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_userId(const std::string& val);

    void __set_loginToken(const std::string& val);

    void __set_loginTokenSignature(const std::string& val);

    void __set_extensionId(const std::string& val);

    void __set_twoFactorCode(const std::string& val);

    bool operator == (const GetMyPrivateKeyRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(userId == rhs.userId))
        return false;
      if (!(loginToken == rhs.loginToken))
        return false;
      if (!(loginTokenSignature == rhs.loginTokenSignature))
        return false;
      if (!(extensionId == rhs.extensionId))
        return false;
      if (!(twoFactorCode == rhs.twoFactorCode))
        return false;
      return true;
    }
    bool operator != (const GetMyPrivateKeyRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GetMyPrivateKeyRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GetMyPrivateKeyRequest &a, GetMyPrivateKeyRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const GetMyPrivateKeyRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GetMyPrivateKeyResponse__isset {
    _GetMyPrivateKeyResponse__isset() : transactionId(false), deviceId(false), myUserId(false), encryptedPrivateKey(false), changePasswordOnNextLogin(true), verified(false), unsignedLoginToken(false), deviceKeyString(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool myUserId :1;
    bool encryptedPrivateKey :1;
    bool changePasswordOnNextLogin :1;
    bool verified :1;
    bool unsignedLoginToken :1;
    bool deviceKeyString :1;
  } _GetMyPrivateKeyResponse__isset;

  class GetMyPrivateKeyResponse {
  public:

    GetMyPrivateKeyResponse(const GetMyPrivateKeyResponse&);
    GetMyPrivateKeyResponse& operator=(const GetMyPrivateKeyResponse&);
    GetMyPrivateKeyResponse() : transactionId(), deviceId(), myUserId(), encryptedPrivateKey(), changePasswordOnNextLogin(false), verified(0), unsignedLoginToken(), deviceKeyString() {
    }

    virtual ~GetMyPrivateKeyResponse() throw();
    std::string transactionId;
    std::string deviceId;
    std::string myUserId;
    std::string encryptedPrivateKey;
    bool changePasswordOnNextLogin;
    bool verified;
    std::string unsignedLoginToken;
    std::string deviceKeyString;

    _GetMyPrivateKeyResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_myUserId(const std::string& val);

    void __set_encryptedPrivateKey(const std::string& val);

    void __set_changePasswordOnNextLogin(const bool val);

    void __set_verified(const bool val);

    void __set_unsignedLoginToken(const std::string& val);

    void __set_deviceKeyString(const std::string& val);

    bool operator == (const GetMyPrivateKeyResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(myUserId == rhs.myUserId))
        return false;
      if (__isset.encryptedPrivateKey != rhs.__isset.encryptedPrivateKey)
        return false;
      else if (__isset.encryptedPrivateKey && !(encryptedPrivateKey == rhs.encryptedPrivateKey))
        return false;
      if (!(changePasswordOnNextLogin == rhs.changePasswordOnNextLogin))
        return false;
      if (!(verified == rhs.verified))
        return false;
      if (!(unsignedLoginToken == rhs.unsignedLoginToken))
        return false;
      if (__isset.deviceKeyString != rhs.__isset.deviceKeyString)
        return false;
      else if (__isset.deviceKeyString && !(deviceKeyString == rhs.deviceKeyString))
        return false;
      return true;
    }
    bool operator != (const GetMyPrivateKeyResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GetMyPrivateKeyResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GetMyPrivateKeyResponse &a, GetMyPrivateKeyResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const GetMyPrivateKeyResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _CheckTwoFactorRequiredRequest__isset {
    _CheckTwoFactorRequiredRequest__isset() : transactionId(false), deviceId(false), extensionId(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool extensionId :1;
  } _CheckTwoFactorRequiredRequest__isset;

  class CheckTwoFactorRequiredRequest {
  public:

    CheckTwoFactorRequiredRequest(const CheckTwoFactorRequiredRequest&);
    CheckTwoFactorRequiredRequest& operator=(const CheckTwoFactorRequiredRequest&);
    CheckTwoFactorRequiredRequest() : transactionId(), deviceId(), extensionId() {
    }

    virtual ~CheckTwoFactorRequiredRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string extensionId;

    _CheckTwoFactorRequiredRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_extensionId(const std::string& val);

    bool operator == (const CheckTwoFactorRequiredRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(extensionId == rhs.extensionId))
        return false;
      return true;
    }
    bool operator != (const CheckTwoFactorRequiredRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const CheckTwoFactorRequiredRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(CheckTwoFactorRequiredRequest &a, CheckTwoFactorRequiredRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const CheckTwoFactorRequiredRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _CheckTwoFactorRequiredResponse__isset {
    _CheckTwoFactorRequiredResponse__isset() : transactionId(false), deviceId(false), twoFactorUrl(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool twoFactorUrl :1;
  } _CheckTwoFactorRequiredResponse__isset;

  class CheckTwoFactorRequiredResponse {
  public:

    CheckTwoFactorRequiredResponse(const CheckTwoFactorRequiredResponse&);
    CheckTwoFactorRequiredResponse& operator=(const CheckTwoFactorRequiredResponse&);
    CheckTwoFactorRequiredResponse() : transactionId(), deviceId(), twoFactorUrl() {
    }

    virtual ~CheckTwoFactorRequiredResponse() throw();
    std::string transactionId;
    std::string deviceId;
    std::string twoFactorUrl;

    _CheckTwoFactorRequiredResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_twoFactorUrl(const std::string& val);

    bool operator == (const CheckTwoFactorRequiredResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(twoFactorUrl == rhs.twoFactorUrl))
        return false;
      return true;
    }
    bool operator != (const CheckTwoFactorRequiredResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const CheckTwoFactorRequiredResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(CheckTwoFactorRequiredResponse &a, CheckTwoFactorRequiredResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const CheckTwoFactorRequiredResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GetMyDeviceKeyResponse__isset {
    _GetMyDeviceKeyResponse__isset() : transactionId(false), deviceId(false), deviceKeyString(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool deviceKeyString :1;
  } _GetMyDeviceKeyResponse__isset;

  class GetMyDeviceKeyResponse {
  public:

    GetMyDeviceKeyResponse(const GetMyDeviceKeyResponse&);
    GetMyDeviceKeyResponse& operator=(const GetMyDeviceKeyResponse&);
    GetMyDeviceKeyResponse() : transactionId(), deviceId(), deviceKeyString() {
    }

    virtual ~GetMyDeviceKeyResponse() throw();
    std::string transactionId;
    std::string deviceId;
    std::string deviceKeyString;

    _GetMyDeviceKeyResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_deviceKeyString(const std::string& val);

    bool operator == (const GetMyDeviceKeyResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(deviceKeyString == rhs.deviceKeyString))
        return false;
      return true;
    }
    bool operator != (const GetMyDeviceKeyResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GetMyDeviceKeyResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GetMyDeviceKeyResponse &a, GetMyDeviceKeyResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const GetMyDeviceKeyResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _SecretClientData__isset {
    _SecretClientData__isset() : type(false), loginUrl(false), username(false), usernameField(false), passwordField(false), title(false) {}
    bool type :1;
    bool loginUrl :1;
    bool username :1;
    bool usernameField :1;
    bool passwordField :1;
    bool title :1;
  } _SecretClientData__isset;

  class SecretClientData {
  public:

    SecretClientData(const SecretClientData&);
    SecretClientData& operator=(const SecretClientData&);
    SecretClientData() : type(), loginUrl(), username(), usernameField(), passwordField(), title() {
    }

    virtual ~SecretClientData() throw();
    std::string type;
    std::string loginUrl;
    std::string username;
    std::string usernameField;
    std::string passwordField;
    std::string title;

    _SecretClientData__isset __isset;

    void __set_type(const std::string& val);

    void __set_loginUrl(const std::string& val);

    void __set_username(const std::string& val);

    void __set_usernameField(const std::string& val);

    void __set_passwordField(const std::string& val);

    void __set_title(const std::string& val);

    bool operator == (const SecretClientData & rhs) const
    {
      if (__isset.type != rhs.__isset.type)
        return false;
      else if (__isset.type && !(type == rhs.type))
        return false;
      if (__isset.loginUrl != rhs.__isset.loginUrl)
        return false;
      else if (__isset.loginUrl && !(loginUrl == rhs.loginUrl))
        return false;
      if (__isset.username != rhs.__isset.username)
        return false;
      else if (__isset.username && !(username == rhs.username))
        return false;
      if (__isset.usernameField != rhs.__isset.usernameField)
        return false;
      else if (__isset.usernameField && !(usernameField == rhs.usernameField))
        return false;
      if (__isset.passwordField != rhs.__isset.passwordField)
        return false;
      else if (__isset.passwordField && !(passwordField == rhs.passwordField))
        return false;
      if (__isset.title != rhs.__isset.title)
        return false;
      else if (__isset.title && !(title == rhs.title))
        return false;
      return true;
    }
    bool operator != (const SecretClientData &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const SecretClientData & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(SecretClientData &a, SecretClientData &b);

  inline std::ostream& operator<<(std::ostream& out, const SecretClientData& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _SecretCriticalData__isset {
    _SecretCriticalData__isset() : password(false), note(false) {}
    bool password :1;
    bool note :1;
  } _SecretCriticalData__isset;

  class SecretCriticalData {
  public:

    SecretCriticalData(const SecretCriticalData&);
    SecretCriticalData& operator=(const SecretCriticalData&);
    SecretCriticalData() : password(), note() {
    }

    virtual ~SecretCriticalData() throw();
    std::string password;
    std::string note;

    _SecretCriticalData__isset __isset;

    void __set_password(const std::string& val);

    void __set_note(const std::string& val);

    bool operator == (const SecretCriticalData & rhs) const
    {
      if (__isset.password != rhs.__isset.password)
        return false;
      else if (__isset.password && !(password == rhs.password))
        return false;
      if (__isset.note != rhs.__isset.note)
        return false;
      else if (__isset.note && !(note == rhs.note))
        return false;
      return true;
    }
    bool operator != (const SecretCriticalData &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const SecretCriticalData & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(SecretCriticalData &a, SecretCriticalData &b);

  inline std::ostream& operator<<(std::ostream& out, const SecretCriticalData& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _Secret__isset {
    _Secret__isset() : secretId(false), hostname(false), encryptedClientData(false), encryptedCriticalData(false), groups(false), hiddenGroups(false), users(false), icons(false), groupNames(false), title(false), groupIdPath(false), clientData(false), criticalData(false) {}
    bool secretId :1;
    bool hostname :1;
    bool encryptedClientData :1;
    bool encryptedCriticalData :1;
    bool groups :1;
    bool hiddenGroups :1;
    bool users :1;
    bool icons :1;
    bool groupNames :1;
    bool title :1;
    bool groupIdPath :1;
    bool clientData :1;
    bool criticalData :1;
  } _Secret__isset;

  class Secret {
  public:

    Secret(const Secret&);
    Secret& operator=(const Secret&);
    Secret() : secretId(0), hostname(), encryptedClientData(), encryptedCriticalData(), title() {
    }

    virtual ~Secret() throw();
    int32_t secretId;
    std::string hostname;
    std::string encryptedClientData;
    std::string encryptedCriticalData;
    std::vector<int32_t>  groups;
    std::vector<int32_t>  hiddenGroups;
    std::vector<std::string>  users;
    std::vector<std::string>  icons;
    std::map<std::string, std::string>  groupNames;
    std::string title;
    std::vector<int32_t>  groupIdPath;
    SecretClientData clientData;
    SecretCriticalData criticalData;

    _Secret__isset __isset;

    void __set_secretId(const int32_t val);

    void __set_hostname(const std::string& val);

    void __set_encryptedClientData(const std::string& val);

    void __set_encryptedCriticalData(const std::string& val);

    void __set_groups(const std::vector<int32_t> & val);

    void __set_hiddenGroups(const std::vector<int32_t> & val);

    void __set_users(const std::vector<std::string> & val);

    void __set_icons(const std::vector<std::string> & val);

    void __set_groupNames(const std::map<std::string, std::string> & val);

    void __set_title(const std::string& val);

    void __set_groupIdPath(const std::vector<int32_t> & val);

    void __set_clientData(const SecretClientData& val);

    void __set_criticalData(const SecretCriticalData& val);

    bool operator == (const Secret & rhs) const
    {
      if (__isset.secretId != rhs.__isset.secretId)
        return false;
      else if (__isset.secretId && !(secretId == rhs.secretId))
        return false;
      if (__isset.hostname != rhs.__isset.hostname)
        return false;
      else if (__isset.hostname && !(hostname == rhs.hostname))
        return false;
      if (__isset.encryptedClientData != rhs.__isset.encryptedClientData)
        return false;
      else if (__isset.encryptedClientData && !(encryptedClientData == rhs.encryptedClientData))
        return false;
      if (__isset.encryptedCriticalData != rhs.__isset.encryptedCriticalData)
        return false;
      else if (__isset.encryptedCriticalData && !(encryptedCriticalData == rhs.encryptedCriticalData))
        return false;
      if (__isset.groups != rhs.__isset.groups)
        return false;
      else if (__isset.groups && !(groups == rhs.groups))
        return false;
      if (__isset.hiddenGroups != rhs.__isset.hiddenGroups)
        return false;
      else if (__isset.hiddenGroups && !(hiddenGroups == rhs.hiddenGroups))
        return false;
      if (__isset.users != rhs.__isset.users)
        return false;
      else if (__isset.users && !(users == rhs.users))
        return false;
      if (__isset.icons != rhs.__isset.icons)
        return false;
      else if (__isset.icons && !(icons == rhs.icons))
        return false;
      if (__isset.groupNames != rhs.__isset.groupNames)
        return false;
      else if (__isset.groupNames && !(groupNames == rhs.groupNames))
        return false;
      if (__isset.title != rhs.__isset.title)
        return false;
      else if (__isset.title && !(title == rhs.title))
        return false;
      if (__isset.groupIdPath != rhs.__isset.groupIdPath)
        return false;
      else if (__isset.groupIdPath && !(groupIdPath == rhs.groupIdPath))
        return false;
      if (__isset.clientData != rhs.__isset.clientData)
        return false;
      else if (__isset.clientData && !(clientData == rhs.clientData))
        return false;
      if (__isset.criticalData != rhs.__isset.criticalData)
        return false;
      else if (__isset.criticalData && !(criticalData == rhs.criticalData))
        return false;
      return true;
    }
    bool operator != (const Secret &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const Secret & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(Secret &a, Secret &b);

  inline std::ostream& operator<<(std::ostream& out, const Secret& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GroupInfo__isset {
    _GroupInfo__isset() : groupId(false), autoDelete(false), name(false), encryptedPrivateKey(false) {}
    bool groupId :1;
    bool autoDelete :1;
    bool name :1;
    bool encryptedPrivateKey :1;
  } _GroupInfo__isset;

  class GroupInfo {
  public:

    GroupInfo(const GroupInfo&);
    GroupInfo& operator=(const GroupInfo&);
    GroupInfo() : groupId(0), autoDelete(0), name(), encryptedPrivateKey() {
    }

    virtual ~GroupInfo() throw();
    int32_t groupId;
    bool autoDelete;
    std::string name;
    std::string encryptedPrivateKey;

    _GroupInfo__isset __isset;

    void __set_groupId(const int32_t val);

    void __set_autoDelete(const bool val);

    void __set_name(const std::string& val);

    void __set_encryptedPrivateKey(const std::string& val);

    bool operator == (const GroupInfo & rhs) const
    {
      if (!(groupId == rhs.groupId))
        return false;
      if (!(autoDelete == rhs.autoDelete))
        return false;
      if (!(name == rhs.name))
        return false;
      if (!(encryptedPrivateKey == rhs.encryptedPrivateKey))
        return false;
      return true;
    }
    bool operator != (const GroupInfo &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GroupInfo & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GroupInfo &a, GroupInfo &b);

  inline std::ostream& operator<<(std::ostream& out, const GroupInfo& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _ListMySecretsAndGroupKeysRequest__isset {
    _ListMySecretsAndGroupKeysRequest__isset() : transactionId(false), deviceId(false), myUserId(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool myUserId :1;
  } _ListMySecretsAndGroupKeysRequest__isset;

  class ListMySecretsAndGroupKeysRequest {
  public:

    ListMySecretsAndGroupKeysRequest(const ListMySecretsAndGroupKeysRequest&);
    ListMySecretsAndGroupKeysRequest& operator=(const ListMySecretsAndGroupKeysRequest&);
    ListMySecretsAndGroupKeysRequest() : transactionId(), deviceId(), myUserId() {
    }

    virtual ~ListMySecretsAndGroupKeysRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string myUserId;

    _ListMySecretsAndGroupKeysRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_myUserId(const std::string& val);

    bool operator == (const ListMySecretsAndGroupKeysRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (__isset.myUserId != rhs.__isset.myUserId)
        return false;
      else if (__isset.myUserId && !(myUserId == rhs.myUserId))
        return false;
      return true;
    }
    bool operator != (const ListMySecretsAndGroupKeysRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const ListMySecretsAndGroupKeysRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(ListMySecretsAndGroupKeysRequest &a, ListMySecretsAndGroupKeysRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const ListMySecretsAndGroupKeysRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _ListMySecretsAndGroupKeysResponse__isset {
    _ListMySecretsAndGroupKeysResponse__isset() : transactionId(false), deviceId(false), myUserId(false), secretToPath(false), groups(false), autocompleteUsers(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool myUserId :1;
    bool secretToPath :1;
    bool groups :1;
    bool autocompleteUsers :1;
  } _ListMySecretsAndGroupKeysResponse__isset;

  class ListMySecretsAndGroupKeysResponse {
  public:

    ListMySecretsAndGroupKeysResponse(const ListMySecretsAndGroupKeysResponse&);
    ListMySecretsAndGroupKeysResponse& operator=(const ListMySecretsAndGroupKeysResponse&);
    ListMySecretsAndGroupKeysResponse() : transactionId(), deviceId(), myUserId() {
    }

    virtual ~ListMySecretsAndGroupKeysResponse() throw();
    std::string transactionId;
    std::string deviceId;
    std::string myUserId;
    std::map<std::string, Secret>  secretToPath;
    std::map<std::string, GroupInfo>  groups;
    std::vector<std::string>  autocompleteUsers;

    _ListMySecretsAndGroupKeysResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_myUserId(const std::string& val);

    void __set_secretToPath(const std::map<std::string, Secret> & val);

    void __set_groups(const std::map<std::string, GroupInfo> & val);

    void __set_autocompleteUsers(const std::vector<std::string> & val);

    bool operator == (const ListMySecretsAndGroupKeysResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(myUserId == rhs.myUserId))
        return false;
      if (!(secretToPath == rhs.secretToPath))
        return false;
      if (!(groups == rhs.groups))
        return false;
      if (!(autocompleteUsers == rhs.autocompleteUsers))
        return false;
      return true;
    }
    bool operator != (const ListMySecretsAndGroupKeysResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const ListMySecretsAndGroupKeysResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(ListMySecretsAndGroupKeysResponse &a, ListMySecretsAndGroupKeysResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const ListMySecretsAndGroupKeysResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GetSecretRequest__isset {
    _GetSecretRequest__isset() : transactionId(false), deviceId(false), userId(false), secretId(false), groupId(false), includeCriticalData(true) {}
    bool transactionId :1;
    bool deviceId :1;
    bool userId :1;
    bool secretId :1;
    bool groupId :1;
    bool includeCriticalData :1;
  } _GetSecretRequest__isset;

  class GetSecretRequest {
  public:

    GetSecretRequest(const GetSecretRequest&);
    GetSecretRequest& operator=(const GetSecretRequest&);
    GetSecretRequest() : transactionId(), deviceId(), userId(), secretId(0), groupId(0), includeCriticalData(false) {
    }

    virtual ~GetSecretRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string userId;
    int32_t secretId;
    int32_t groupId;
    bool includeCriticalData;

    _GetSecretRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_userId(const std::string& val);

    void __set_secretId(const int32_t val);

    void __set_groupId(const int32_t val);

    void __set_includeCriticalData(const bool val);

    bool operator == (const GetSecretRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(userId == rhs.userId))
        return false;
      if (!(secretId == rhs.secretId))
        return false;
      if (!(groupId == rhs.groupId))
        return false;
      if (!(includeCriticalData == rhs.includeCriticalData))
        return false;
      return true;
    }
    bool operator != (const GetSecretRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GetSecretRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GetSecretRequest &a, GetSecretRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const GetSecretRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _GetSecretResponse__isset {
    _GetSecretResponse__isset() : transactionId(false), deviceId(false), secret(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool secret :1;
  } _GetSecretResponse__isset;

  class GetSecretResponse {
  public:

    GetSecretResponse(const GetSecretResponse&);
    GetSecretResponse& operator=(const GetSecretResponse&);
    GetSecretResponse() : transactionId(), deviceId() {
    }

    virtual ~GetSecretResponse() throw();
    std::string transactionId;
    std::string deviceId;
    Secret secret;

    _GetSecretResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_secret(const Secret& val);

    bool operator == (const GetSecretResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(secret == rhs.secret))
        return false;
      return true;
    }
    bool operator != (const GetSecretResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const GetSecretResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(GetSecretResponse &a, GetSecretResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const GetSecretResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _AddSecretRequest__isset {
    _AddSecretRequest__isset() : transactionId(false), deviceId(false), myUserId(false), secretId(false), ownerGroupId(false), hostname(false), encryptedClientData(false), encryptedCriticalData(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool myUserId :1;
    bool secretId :1;
    bool ownerGroupId :1;
    bool hostname :1;
    bool encryptedClientData :1;
    bool encryptedCriticalData :1;
  } _AddSecretRequest__isset;

  class AddSecretRequest {
  public:

    AddSecretRequest(const AddSecretRequest&);
    AddSecretRequest& operator=(const AddSecretRequest&);
    AddSecretRequest() : transactionId(), deviceId(), myUserId(), secretId(0), ownerGroupId(0), hostname(), encryptedClientData(), encryptedCriticalData() {
    }

    virtual ~AddSecretRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string myUserId;
    int32_t secretId;
    int32_t ownerGroupId;
    std::string hostname;
    std::string encryptedClientData;
    std::string encryptedCriticalData;

    _AddSecretRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_myUserId(const std::string& val);

    void __set_secretId(const int32_t val);

    void __set_ownerGroupId(const int32_t val);

    void __set_hostname(const std::string& val);

    void __set_encryptedClientData(const std::string& val);

    void __set_encryptedCriticalData(const std::string& val);

    bool operator == (const AddSecretRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(myUserId == rhs.myUserId))
        return false;
      if (__isset.secretId != rhs.__isset.secretId)
        return false;
      else if (__isset.secretId && !(secretId == rhs.secretId))
        return false;
      if (!(ownerGroupId == rhs.ownerGroupId))
        return false;
      if (!(hostname == rhs.hostname))
        return false;
      if (!(encryptedClientData == rhs.encryptedClientData))
        return false;
      if (!(encryptedCriticalData == rhs.encryptedCriticalData))
        return false;
      return true;
    }
    bool operator != (const AddSecretRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const AddSecretRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(AddSecretRequest &a, AddSecretRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const AddSecretRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _AddSecretResponse__isset {
    _AddSecretResponse__isset() : transactionId(false), deviceId(false), secretId(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool secretId :1;
  } _AddSecretResponse__isset;

  class AddSecretResponse {
  public:

    AddSecretResponse(const AddSecretResponse&);
    AddSecretResponse& operator=(const AddSecretResponse&);
    AddSecretResponse() : transactionId(), deviceId(), secretId(0) {
    }

    virtual ~AddSecretResponse() throw();
    std::string transactionId;
    std::string deviceId;
    int32_t secretId;

    _AddSecretResponse__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_secretId(const int32_t val);

    bool operator == (const AddSecretResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(secretId == rhs.secretId))
        return false;
      return true;
    }
    bool operator != (const AddSecretResponse &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const AddSecretResponse & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(AddSecretResponse &a, AddSecretResponse &b);

  inline std::ostream& operator<<(std::ostream& out, const AddSecretResponse& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _RemoveSecretRequest__isset {
    _RemoveSecretRequest__isset() : transactionId(false), deviceId(false), myUserId(false), groupId(false), secretId(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool myUserId :1;
    bool groupId :1;
    bool secretId :1;
  } _RemoveSecretRequest__isset;

  class RemoveSecretRequest {
  public:

    RemoveSecretRequest(const RemoveSecretRequest&);
    RemoveSecretRequest& operator=(const RemoveSecretRequest&);
    RemoveSecretRequest() : transactionId(), deviceId(), myUserId(), groupId(0), secretId(0) {
    }

    virtual ~RemoveSecretRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string myUserId;
    int32_t groupId;
    int32_t secretId;

    _RemoveSecretRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_myUserId(const std::string& val);

    void __set_groupId(const int32_t val);

    void __set_secretId(const int32_t val);

    bool operator == (const RemoveSecretRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(myUserId == rhs.myUserId))
        return false;
      if (__isset.groupId != rhs.__isset.groupId)
        return false;
      else if (__isset.groupId && !(groupId == rhs.groupId))
        return false;
      if (!(secretId == rhs.secretId))
        return false;
      return true;
    }
    bool operator != (const RemoveSecretRequest &rhs) const {
      return !(*this == rhs);
    }

    bool operator < (const RemoveSecretRequest & ) const;

    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    virtual void printTo(std::ostream& out) const;
  };

  void swap(RemoveSecretRequest &a, RemoveSecretRequest &b);

  inline std::ostream& operator<<(std::ostream& out, const RemoveSecretRequest& obj)
  {
    obj.printTo(out);
    return out;
  }

  typedef struct _EditEncryptedPrivateKeyRequest__isset {
    _EditEncryptedPrivateKeyRequest__isset() : transactionId(false), deviceId(false), userId(false), encryptedPrivateKey(false), publicKey(false), analyticsId(false), groupKeyEncryptedForMe(false), groupPublicKey(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool userId :1;
    bool encryptedPrivateKey :1;
    bool publicKey :1;
    bool analyticsId :1;
    bool groupKeyEncryptedForMe :1;
    bool groupPublicKey :1;
  } _EditEncryptedPrivateKeyRequest__isset;

  class EditEncryptedPrivateKeyRequest {
  public:

    EditEncryptedPrivateKeyRequest(const EditEncryptedPrivateKeyRequest&);
    EditEncryptedPrivateKeyRequest& operator=(const EditEncryptedPrivateKeyRequest&);
    EditEncryptedPrivateKeyRequest() : transactionId(), deviceId(), userId(), encryptedPrivateKey(), publicKey(), analyticsId(), groupKeyEncryptedForMe(), groupPublicKey() {
    }

    virtual ~EditEncryptedPrivateKeyRequest() throw();
    std::string transactionId;
    std::string deviceId;
    std::string userId;
    std::string encryptedPrivateKey;
    std::string publicKey;
    std::string analyticsId;
    std::string groupKeyEncryptedForMe;
    std::string groupPublicKey;

    _EditEncryptedPrivateKeyRequest__isset __isset;

    void __set_transactionId(const std::string& val);

    void __set_deviceId(const std::string& val);

    void __set_userId(const std::string& val);

    void __set_encryptedPrivateKey(const std::string& val);

    void __set_publicKey(const std::string& val);

    void __set_analyticsId(const std::string& val);

    void __set_groupKeyEncryptedForMe(const std::string& val);
    
    void __set_groupPublicKey(const std::string& val);
    
    bool operator == (const EditEncryptedPrivateKeyRequest & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(userId == rhs.userId))
        return false;
      if (!(encryptedPrivateKey == rhs.encryptedPrivateKey))
        return false;
      if (!(publicKey == rhs.publicKey))
        return false;
      if (!(analyticsId == rhs.analyticsId))
        return false;
      if (!(groupKeyEncryptedForMe == rhs.groupKeyEncryptedForMe))
        return false;
      if (!(groupPublicKey == rhs.groupPublicKey))
        return false;
      return true;
    }
    bool operator != (const EditEncryptedPrivateKeyRequest &rhs) const {
      return !(*this == rhs);
    }
    
    bool operator < (const EditEncryptedPrivateKeyRequest & ) const;
    
    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
    
    virtual void printTo(std::ostream& out) const;
  };
  
  void swap(EditEncryptedPrivateKeyRequest &a, EditEncryptedPrivateKeyRequest &b);
  
  inline std::ostream& operator<<(std::ostream& out, const EditEncryptedPrivateKeyRequest& obj)
  {
    obj.printTo(out);
    return out;
  }
  
  typedef struct _AddIdentityResponse__isset {
    _AddIdentityResponse__isset() : transactionId(false), deviceId(false), unsignedLoginToken(false), verified(false), privateGroupId(false) {}
    bool transactionId :1;
    bool deviceId :1;
    bool unsignedLoginToken :1;
    bool verified :1;
    bool privateGroupId :1;
  } _AddIdentityResponse__isset;
  
  class AddIdentityResponse {
  public:
    
    AddIdentityResponse(const AddIdentityResponse&);
    AddIdentityResponse& operator=(const AddIdentityResponse&);
    AddIdentityResponse() : transactionId(), deviceId(), unsignedLoginToken(), verified(0), privateGroupId(0) {
    }
    
    virtual ~AddIdentityResponse() throw();
    std::string transactionId;
    std::string deviceId;
    std::string unsignedLoginToken;
    bool verified;
    int32_t privateGroupId;
    
    _AddIdentityResponse__isset __isset;
    
    void __set_transactionId(const std::string& val);
    
    void __set_deviceId(const std::string& val);
    
    void __set_unsignedLoginToken(const std::string& val);
    
    void __set_verified(const bool val);
    
    void __set_privateGroupId(const int32_t val);
    
    bool operator == (const AddIdentityResponse & rhs) const
    {
      if (!(transactionId == rhs.transactionId))
        return false;
      if (!(deviceId == rhs.deviceId))
        return false;
      if (!(unsignedLoginToken == rhs.unsignedLoginToken))
        return false;
      if (!(verified == rhs.verified))
        return false;
      if (__isset.privateGroupId != rhs.__isset.privateGroupId)
        return false;
      else if (__isset.privateGroupId && !(privateGroupId == rhs.privateGroupId))
        return false;
      return true;
    }
    bool operator != (const AddIdentityResponse &rhs) const {
      return !(*this == rhs);
    }
    
    bool operator < (const AddIdentityResponse & ) const;
    
    uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
    uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
    
    virtual void printTo(std::ostream& out) const;
  };
  
  void swap(AddIdentityResponse &a, AddIdentityResponse &b);
  
  inline std::ostream& operator<<(std::ostream& out, const AddIdentityResponse& obj)
  {
    obj.printTo(out);
    return out;
  }
  
} // namespace

#endif
